# -*- coding: utf-8 -*-
"""DA1_HomeAssignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13lwRmt0D7oC-Th-IUvaif_Omoe1OyAgY

# **Install required library**
"""

!pip install numpy
!pip install pandas
!pip install yfinance

"""# **Import library**"""

import numpy as np
import pandas as pd
import yfinance as yf

"""# **Scraping Historical Stock Prices**"""

# create a list of stock symbols
tickers = ["CARZ", "VCAR", "KBE", "KBWB", "FTXO", "ERUS", "TPYP", "FXN", "PSCE", "SULR", "CHIE", "VOX", "NXTG", "FCOM", "IYZ", "IXP", "XTL", "WBIF", "EWCO", "LTL", "ICLN", "QCLN" "PBW", "ACES", "PBD", "CNRG", "SMOG", "WCLD", "CLDL", "UCYB", "VCLO", "IYC", "UCC", "SCC", "ENFR", "AMND", "EINC"]

# scraping data from yahoo finance via the yfinance library
stocks = yf.download(tickers, start = "2020-09-01", end = "2020-12-31", interval="1h")

#Notice above that there are errors in yfinance when it comes to certain stock symbols

display(stocks)

"""We can see from the data frame (DF) above that there are NaN values which will create problems in calculating averages. We will remove them by using the Fillna method"""

# Let's first create a data frame (DF) along with the required lists

DF = pd.DataFrame()
ETF_Average = []
ETF_List = []
Industry_Average = []
Industries = ["Automotive", "Banks", "BroadEnergy", "BroadTelecom", "CleanEnergy", "CloudComputing", "ConsumerServices", "EnergyInfrastructure"]

# Creating a Fillna function to tackle the NaN problem. We fix this by filling the NaN with average of the series

def Fillna(df,x):
  NaN = df[x].isna().sum()
  Series = len(df[x])
  Series_Sum = df[x].sum()
  Average = Series_Sum / (Series - NaN)
  df[x] = df[x].fillna(Average)
  return Average

"""## **Organizing Data**"""

# Commented out IPython magic to ensure Python compatibility.
#uploading csv files to google drive and consquently connecting it with colab
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

Industries = ["Automotive", "Banks", "BroadEnergy", "BroadTelecom", "CleanEnergy", "CloudComputing", "ConsumerServices", "EnergyInfrastructure"]
# scraping the stock symbols from the csv files downloaded from etfdb.com
for Industry_Name in Industries:
  Industry = pd.read_csv('/gdrive/MyDrive/Colab Notebooks/DataFiles/{}.csv'.format(Industry_Name))
  ETF = Industry['Symbol'].tolist()
# need the sum and count in order to calculate the averages
  sum = 0
  count = 0

  for ETF_Symbol in ETF:
    #some symbols are missing in yfinance at various time periods
    if ETF_Symbol not in ['QCLNPBW','UCYB','CLDL']:
      df = yf.Ticker(ETF_Symbol)
      df1 = df.history(interval = "60m", start = "2020-09-01", end = "2020-12-31")
      #to concatenate industry name with the stock symbol
      column = Industry_Name + '_' + ETF_Symbol
      DF[column] = df1.Close - df1.Open

      Average = Fillna(DF,column)
      ETF_Average.append(Average)
      ETF_List.append(ETF_Symbol)

      count += 1
      sum += Average
  Industry_Average.append((sum/count))
DF

"""# **ETF Mean**"""

ETF_Mean = pd.Series(ETF_Average,index=ETF_List)
ETF_Mean

"""# **Industry Average**"""

Industry_Mean = pd.Series(Industry_Average,index= Industries)
Industry_Mean